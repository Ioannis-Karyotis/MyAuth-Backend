// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAuth.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MyAuth.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210815165709_ExternalAppUpdate")]
    partial class ExternalAppUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MyAuth")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MyAuth.Models.Database.ExternalApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppName")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("CallbackUrl")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("MyAuthUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CallbackUrl")
                        .IsUnique();

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("ClientSecret")
                        .IsUnique();

                    b.HasIndex("MyAuthUserId");

                    b.ToTable("ExternalApps");
                });

            modelBuilder.Entity("MyAuth.Models.Database.ExternalAppAuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ExternalAppId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MyAuthUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAppId");

                    b.HasIndex("MyAuthUserId");

                    b.ToTable("ExternalAppsAuthUsers");
                });

            modelBuilder.Entity("MyAuth.Models.Database.MyAuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FaceDescriptor")
                        .HasColumnType("jsonb")
                        .HasColumnName("FaceDescriptor");

                    b.Property<bool>("HasFaceRegistered")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("MyAuthUsers");
                });

            modelBuilder.Entity("MyAuth.Models.Database.ExternalApp", b =>
                {
                    b.HasOne("MyAuth.Models.Database.MyAuthUser", "AuthUserOwner")
                        .WithMany("ExternalApps")
                        .HasForeignKey("MyAuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthUserOwner");
                });

            modelBuilder.Entity("MyAuth.Models.Database.ExternalAppAuthUser", b =>
                {
                    b.HasOne("MyAuth.Models.Database.ExternalApp", "ExternalApp")
                        .WithMany("ExternalAppAuthUsers")
                        .HasForeignKey("ExternalAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAuth.Models.Database.MyAuthUser", "AuthUser")
                        .WithMany("ExternalAppAuthUsers")
                        .HasForeignKey("MyAuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthUser");

                    b.Navigation("ExternalApp");
                });

            modelBuilder.Entity("MyAuth.Models.Database.ExternalApp", b =>
                {
                    b.Navigation("ExternalAppAuthUsers");
                });

            modelBuilder.Entity("MyAuth.Models.Database.MyAuthUser", b =>
                {
                    b.Navigation("ExternalAppAuthUsers");

                    b.Navigation("ExternalApps");
                });
#pragma warning restore 612, 618
        }
    }
}
